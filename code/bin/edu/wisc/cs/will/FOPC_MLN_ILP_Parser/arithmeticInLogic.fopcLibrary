usePrologVariables: true.

importLibrary: comparisonInLogic.

addList(     List, Result) :- allNumbers(List), addListOfNumbers(     List, Result).
multiplyList(List, Result) :- allNumbers(List), multiplyListOfNumbers(List, Result).

allNumbers([]).
allNumbers([X | Y]) :- number(X), allNumbers(Y).

prune: addList(     [], _).
prune: multiplyList([], _).

cost: addList/2,      1.3; // Make these cost a little more than regular predicates.
cost: multiplyList/2, 1.3; 
cost: allNumbers/1,   1.2;
cost: plus/3,         1.1;
cost: minus/2,        1.15;
cost: minus/3,        1.1;
cost: mult/3,         1.1;
cost: div/3,          1.1;
cost: abs/2,          1.2;
cost: exp/2,          1.2;
cost: log/3,          1.2;
cost: exp/3,          1.3;
cost: max/3,          1.3;
cost: min/3,          1.3;

// Mark some arithmetic that is 'trivial.'
prune: plus(   _, 0.0, _).
prune: plus( 0.0,   _, _).
prune: minus(  _, 0.0, _).
prune: mult(   _, 1.0, _).
prune: mult( 1.0,   _, _).
prune: div(    _, 1.0, _).
prune: div(    _, 0.0, _).
prune: exp(    _, 1.0, _).
prune: exp(    0.0, _, _).

prune: minus(X, X).

prune: plus( _,   0.0, _).
prune: plus( 0.0, _,   _).
prune: plus( X,   _,   X).
prune: plus( _,   X,   X).
prune: minus(_,   0.0, _).
prune: minus(X,   X,   _).
prune: mult( _,   1.0, _).
prune: mult( 1.0, _,   _).
prune: mult( X,   _,   X).
prune: mult( _,   X,   X).
prune: div(  _,   1.0, _).
prune: div(  _,   0.0, _).
prune: div(  X,   X,   _).
prune: exp(  _,   1.0, _).
prune: exp(  0.0, _,   _).
pruneTrue: plus(  X, 0.0, X).
pruneTrue: plus(0.0, X,   X).
pruneTrue: minus( X, 0.0, X).
pruneTrue: mult(  X, 1.0, X).
pruneTrue: div(   X, 1.0, X).
pruneTrue: exp(   X, 0.0, 1.0).
pruneTrue: max(   X, X,   X).
pruneTrue: min(   X, X,   X).

// The FIRST definition for a head clause will be the one used if "in-lining."

abs(X, Y) :- number(X), var(Y),    Y is abs(X).
abs(X, Y) :- number(X), number(Y), Y is abs(X). // Do type checking some no errors thrown.
isaErrorToleranceInArithmetic(0.00001).

plus( X, Y, Z) :- number(X), number(Y), var(Z), !, Z is X + Y.
plus( X, Y, Z) :- number(X), number(Z), var(Y), !, Y is Z - X.
plus( X, Y, Z) :- number(Y), number(Z), var(X), !, X is Z - Y.

minus(X, Y, Z) :- number(X), number(Y), var(Z), !, Z is X - Y.
minus(X, Y, Z) :- number(X), number(Z), var(Y), !, Y is X - Z.
minus(X, Y, Z) :- number(Y), number(Z), var(X), !, X is Z + Y.

minus(X, Y) :- number(X), var(Y), !, Y is -X.
minus(X, Y) :- number(Y), var(X), !, X is -Y.

pruneTrue: abs(0,   0).
pruneTrue: abs(0,   0.0).
pruneTrue: abs(0.0, 0).
pruneTrue: abs(0.0, 0.0).

pruneTrue: minus(0,   0).
pruneTrue: minus(0,   0.0).
pruneTrue: minus(0.0, 0).
pruneTrue: minus(0.0, 0.0).

mult( X, Y, Z) :- number(X), number(Y), var(Z), !, Z is X * Y.
mult( X, Y, Z) :- number(X), number(Z), var(Y), !, Y is Z / X.
mult( X, Y, Z) :- number(Y), number(Z), var(X), !, X is Z / Y.

div(  X, Y, Z) :- number(X), number(Y), var(Z), !, Z is X / Y.
div(  X, Y, Z) :- number(X), number(Z), var(Y), !, Y is X / Z.
div(  X, Y, Z) :- number(Y), number(Z), var(X), !, X is Z * Y.

// X is base and Y is the exponent, Z is the result.
exp(0.0,_,0.0) :- !. // Pull out this special case.
exp(_,0.0,1.0) :- !. // Pull out this special case.
exp(  X, Y, Z) :- number(X), number(Y), var(Z), !, Z is X**Y.
exp(  X, Y, Z) :- number(X), number(Z), var(Y), !, Y is log(Z) / log(X).
exp(  X, Y, Z) :- number(Y), number(Z), var(X), !, X is Z**(1/Y).

// log_Y(X) = Z
// log_base(X) = log_k(X) / log_k(base) for any k.
log(  X, _, _) :- number(X), X <= 0, !, false(). // Pull out this special case.  Could use NaN and inf and -inf ...
log(1.0,_,0.0) :- !.
log(  X, Y, Z) :- number(X), number(Y), var(Z), !, Z is log(X, Y).
log(  X, Y, Z) :- number(Y), number(Z), var(X), !, X is Y**Z.
log(  X, Y, Z) :- number(Z), number(Z), var(Y), !, Y is X**(1/Z).
log(  X,    Z) :- number(X), var(Z), !, Z is log(X).
log(  X,    Z) :- number(Z), var(X), !, X is exp(1)**Z.

max(X, Y, Z)   :- number(X), number(Y), !, Z is max(X, Y).
min(X, Y, Z)   :- number(X), number(Y), !, Z is min(X, Y).

plus( X, Y, Z) :- number(X), number(Y), number(Z), !, Ztemp is X + Y,    equalWithSmallTolerance(Z, Ztemp).
minus(X, Y, Z) :- number(X), number(Y), number(Z), !, Ztemp is X - Y,    equalWithSmallTolerance(Z, Ztemp).
mult( X, Y, Z) :- number(X), number(Y), number(Z), !, Ztemp is X * Y,    equalWithSmallTolerance(Z, Ztemp).
div(  X, Y, Z) :- number(X), number(Y), number(Z), !, Ztemp is Z * Y,    equalWithSmallTolerance(X, Ztemp).
exp(  X, Y, Z) :- number(X), number(Y), number(Z), !, Ztemp is X**Y,     equalWithSmallTolerance(Z, Ztemp).
log(  X, Y, Z) :- number(X), number(Y), number(Z), !, Ztemp is log(X,Y), equalWithSmallTolerance(Z, Ztemp).

minus(X, Y)    :- number(X), number(Y),            !, Ytemp is    -X,    equalWithSmallTolerance(Z, Ztemp).
log(  X,    Z) :- number(X), number(Y),            !, Ztemp is log(X),   equalWithSmallTolerance(Z, Ztemp).
